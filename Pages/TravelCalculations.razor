@page "/travel"

@using Microsoft.AspNetCore.Components.Web
@using Converter_Web_Application.Service
@using Converter_Web_Application.Service.Commands.Travel

@inject NavigationManager Navigation
@inject ConversionManagerService ConversionManagerService
@inject TranslationService TranslationService

<PageTitle>Travel Calculation</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h1>@TranslationService.Translate("Travel_Calculation")</h1>
            <div class="form-group spaced-form-group">
                <label for="modeSelect">@TranslationService.Translate("Select_Mode")</label>
                <select id="modeSelect" class="form-control" @onchange="OnModeChange">
                    <option value="time">@TranslationService.Translate("Get_Time")</option>
                    <option value="speed">@TranslationService.Translate("Get_Speed")</option>
                </select>
            </div>

            @if (mode == "time")
            {
                <div>
                    <div class="form-group spaced-form-group">
                        <label for="distanceMetric">@TranslationService.Translate("Select_Distance_Metric")</label>
                        <select id="distanceMetric" class="form-control" @bind="distanceMetric">
                            <option value="km">@TranslationService.Translate("Kilometers")</option>
                            <option value="miles">@TranslationService.Translate("Miles")</option>
                        </select>
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="distance">@TranslationService.Translate("Enter_Distance")</label>
                        <input type="number" id="distance" @bind="distance" class="form-control" />
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="speedMetric">@TranslationService.Translate("Select_Speed_Metric")</label>
                        <select id="speedMetric" class="form-control" @bind="speedMetric">
                            <option value="km/h">@TranslationService.Translate("Kilometers_per_Hour")</option>
                            <option value="mph">@TranslationService.Translate("Miles_per_Hour")</option>
                        </select>
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="speed">@TranslationService.Translate("Enter_Speed")</label>
                        <input type="number" id="speed" @bind="speed" class="form-control" />
                    </div>
                    <button class="btn btn-primary spaced-form-group" @onclick="CalculateTime">@TranslationService.Translate("Calculate_Time")</button>
                </div>
            }
            else if (mode == "speed")
            {
                <div>
                    <div class="form-group spaced-form-group">
                        <label for="distanceMetric">@TranslationService.Translate("Select_Distance_Metric")</label>
                        <select id="distanceMetric" class="form-control" @bind="distanceMetric">
                            <option value="km">@TranslationService.Translate("Kilometers")</option>
                            <option value="miles">@TranslationService.Translate("Miles")</option>
                        </select>
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="distance">@TranslationService.Translate("Enter_Distance")</label>
                        <input type="number" id="distance" @bind="distance" class="form-control" />
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="timeMetric">@TranslationService.Translate("Select_Time_Metric")</label>
                        <select id="timeMetric" class="form-control" @bind="timeMetric">
                            <option value="hours">@TranslationService.Translate("Hours")</option>
                            <option value="minutes">@TranslationService.Translate("Minutes")</option>
                        </select>
                    </div>
                    <div class="form-group spaced-form-group">
                        <label for="time">@TranslationService.Translate("Enter_Time")</label>
                        <input type="number" id="time" @bind="time" class="form-control" />
                    </div>
                    <button class="btn btn-primary spaced-form-group" @onclick="CalculateSpeed">@TranslationService.Translate("Calculate_Speed")</button>
                </div>
            }

            <div class="form-group spaced-form-group mt-3">
                <label for="resultValue">@TranslationService.Translate("Result")</label>
                <input type="text" id="resultValue" @bind="result" class="form-control" readonly />
            </div>
        </div>
    </div>
</div>

@code {
    private string mode = "time";
    private double speed;
    private double distance;
    private double time;
    private string distanceMetric = "km";
    private string speedMetric = "km/h";
    private string timeMetric = "hours";
    private string? result;

    private void OnModeChange(ChangeEventArgs e)
    {
        mode = e.Value.ToString();
        result = string.Empty; // Clear result when mode changes
    }

    private void CalculateTime()
    {
        double distanceInKm = distanceMetric == "miles" ? ConversionManagerService.Convert("miles", "kilometers", distance) : distance;
        double speedInKmH = speedMetric == "mph" ? ConversionManagerService.Convert("mph", "km/h", speed) : speed;

        ITravelCommand command = new CalculateTravelTimeCommand();
        double travelTime = command.Execute(distanceInKm, speedInKmH);

        int hours = (int)travelTime;
        int minutes = (int)((travelTime - hours) * 60);

        string formattedTravelTime = $"{hours} hours and {minutes} minutes";

        result = string.Format(TranslationService.Translate("result_time_format"), speed, speedMetric, distance, distanceMetric, formattedTravelTime, "");
    }

    private void CalculateSpeed()
    {
        double distanceInKm = distanceMetric == "miles" ? ConversionManagerService.Convert("miles", "kilometers", distance) : distance;
        double timeInHours = timeMetric == "minutes" ? time / 60 : time;

        ITravelCommand command = new CalculateTravelSpeedCommand();
        double requiredSpeed = command.Execute(distanceInKm, timeInHours);

        string speedUnitDisplay = speedMetric == "mph" ? TranslationService.Translate("miles_per_hour") : TranslationService.Translate("kilometers_per_hour");

        result = string.Format(TranslationService.Translate("result_speed_format"), distance, distanceMetric, time, timeMetric, requiredSpeed, speedUnitDisplay);
    }

    protected override void OnInitialized()
    {
        TranslationService.OnLanguageChanged += StateHasChanged;
    }

    public void Dispose()
    {
        TranslationService.OnLanguageChanged -= StateHasChanged;
    }
}
