<!-- Enable handling URLs requests and receving paramaters-->
@* used to determine the type of measurement (e.g., length, weight, volume) the user wants to convert *@
@page "/units/{type}" 
@page "/units"

<!-- provides navigation capabilities, allowing the component 
to navigate to different pages or get information about the 
current page -->
@inject NavigationManager Navigation

<!-- Provides the conversion logic, allowing the component to perform conversions based on user input -->
@inject Converter_Web_Application.Service.ConversionManagerService ConversionManagerService

<PageTitle>Unit Converter</PageTitle>

<div class="container-fluid" @onkeydown="HandleKeyDown">
    <div class="row">
        <div class="col-md-2">
            <NavMenu />
        </div>
        <div class="col-md-10">
            <h1>@(FormatType(Type) ?? "Select a Measurement Type") Conversion</h1>
            <!-- Implemented two way data binding -->
            <div class="form-group">
                <label for="inputValue">Value to Convert</label>
                <input type="number" id="inputValue" @bind="value" class="form-control" @onkeydown="HandleKeyDown" />
            </div>

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>From Unit</label>
                    <select @bind="fromUnit" class="form-control">
                        @foreach (var unit in availableUnits)
                        {
                            <option value="@unit">@unit</option>
                        }
                    </select>
                </div>

                <div class="form-group col-md-6">
                    <label>To Unit</label>
                    <select @bind="toUnit" class="form-control">
                        @foreach (var unit in availableUnits)
                        {
                            <option value="@unit">@unit</option>
                        }
                    </select>
                </div>
            </div>

            <button class="btn btn-primary" 
                @onclick="ConvertUnits">
                Convert
            </button>

            <div class="form-group mt-3">
                <label for="resultValue">Result</label>
                <input type="text" id="resultValue" @bind="writeLine" class="form-control" readonly />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Type { get; set; }

    private double value;
    private double convertedValue;
    private string? fromUnit;
    private string? toUnit;
    private List<string> availableUnits = new List<string>();
    private string? formattedConvertedValue;
    private string? writeLine;

    // Assigning user conversion choose to a List
    protected override void OnParametersSet()
    {
        ResetFields(); // Reset fields when parameters are set
        switch (Type?.ToLower())
        {
            case "length":
                availableUnits = new List<string> { "Meters", "Centimeters", "Millimeters", "Kilometers", "Miles", "Nautical Miles", "Yards", "Feet", "Inches", "Leagues" };
                break;
            case "weight":
                availableUnits = new List<string> { "Kilograms", "Grams", "Pounds", "Ounces", "Stones" };
                break;
            case "volume":
                availableUnits = new List<string> { "Liters", "Milliliters", "Cubic Meters", "Cubic Centimeters", "Cubic Inches" };
                break;
            case "temperature":
                availableUnits = new List<string> { "Celsius", "Fahrenheit", "Kelvin" };
                break;
            case "area":
                availableUnits = new List<string> { "Square meters", "Square feet", "Square yards", "Square miles", "Square kilometers", "Acres", "Hectares", "Square centimeters", "Square inches", "Square millimeters" };
                break;
            case "time":
                availableUnits = new List<string> { "Seconds", "Minutes", "Hours", "Days", "Weeks", "Months", "Years" };
                break;
            case "digital_storage":
                availableUnits = new List<string> { "Bits", "Bytes", "Kilobits", "Kilobytes", "Megabits", "Megabytes", "Gigabits", "Gigabytes", "Terabits", "Terabytes" };
                break;
            case "speed":
                availableUnits = new List<string> { "Meters per Second", "Kilometers Per Hour", "Miles per Hour", "Feet Per Second", "Knots" };
                break;
            // Add more cases for other measurements
            default:
                availableUnits = new List<string>();
                break;
        }
        fromUnit = availableUnits.FirstOrDefault(); // Assign a first unit from the list or default unit
        toUnit = availableUnits.FirstOrDefault(); // Assign a first unit from the list or default unit
    }

    private void ConvertUnits()
    {
        // Conversion logic based on the selected units and value
        // Gethering result if selected units conversion has developed dedicated coversion logic
        var conversion = ConversionManagerService.GetAllConversions()
            .FirstOrDefault(c => c.FromUnit.Equals(fromUnit, StringComparison.OrdinalIgnoreCase) &&
                                 c.ToUnit.Equals(toUnit, StringComparison.OrdinalIgnoreCase));
        if (conversion != null)
        {
            convertedValue = conversion.Convert(value);
            // Adjust formatting to handle both very small and very large numbers more clearly
            if (convertedValue < 1.0)
            {
                formattedConvertedValue = convertedValue.ToString("0.############"); // Up to 12 decimal places without trailing zeros
            }
            else
            {
                formattedConvertedValue = convertedValue.ToString("N12").TrimEnd('0').TrimEnd('.'); // Format and trim unnecessary zeroes
            }
            writeLine = $"{value} {fromUnit} is equal to {formattedConvertedValue} {toUnit}";
        }
        else
        {
            // Handle conversion not found scenario
            formattedConvertedValue = "Invalid conversion choice."; // or any other appropriate error handling
            writeLine = formattedConvertedValue;
        }
    }
    // Handle keyboard event - user press enter
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        // Check if the Enter key is pressed
        if (e.Key == "Enter")
        {
            ConvertUnits();
        }
    }

    // Reset value and result fields when conversion units change
    private void ResetFields()
    {
        value = 0;
        convertedValue = 0;
        formattedConvertedValue = string.Empty;
        writeLine = string.Empty;
    }
    // Format type string to capitalize the first letter of each word and replace underscores with spaces
    private string FormatType(string? type)
    {
        if (string.IsNullOrEmpty(type))
        {
            return string.Empty;
        }

        // Split the type by underscores and capitalize the first letter of each word
        var words = type.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
        for (int i = 0; i < words.Length; i++)
        {
            words[i] = char.ToUpper(words[i][0]) + words[i].Substring(1);
        }
        return string.Join(' ', words);
    }
}
