<!-- Enable handling URLs requests and receving paramaters-->
@* used to determine the type of measurement (e.g., length, weight, volume) the user wants to convert *@
@page "/units/{type}" 
@page "/units"

<!-- provides navigation capabilities, allowing the component 
to navigate to different pages or get information about the 
current page -->
@inject NavigationManager Navigation

<!-- Provides the conversion logic, allowing the component to perform conversions based on user input -->
@inject Converter_Web_Application.Service.ConversionManagerService ConversionManagerService

<PageTitle>Unit Converter</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <NavMenu />
        </div>
        <div class="col-md-10">
            <h1>@(Type ?? "Select a Measurement Type") Page</h1>
            <!-- Implemented two way data binding -->
            <div class="form-group">
                <label for="inputValue">Value to Convert</label>
                <input type="number" id="inputValue" @bind="value" class="form-control" />
            </div>

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>From Unit</label>
                    <select @bind="fromUnit" class="form-control">
                        @foreach (var unit in availableUnits)
                        {
                            <option value="@unit">@unit</option>
                        }
                    </select>
                </div>

                <div class="form-group col-md-6">
                    <label>To Unit</label>
                    <select @bind="toUnit" class="form-control">
                        @foreach (var unit in availableUnits)
                        {
                            <option value="@unit">@unit</option>
                        }
                    </select>
                </div>
            </div>

            <button class="btn btn-primary" @onclick="ConvertUnits">Convert</button>

            <div class="form-group mt-3">
                <label for="resultValue">Result</label>
                <input type="text" id="resultValue" @bind="convertedValue" class="form-control" readonly />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; }

    private double value;
    private double convertedValue;
    private string fromUnit;
    private string toUnit;
    private List<string> availableUnits = new List<string>();

    // Assigning user conversion choose to a List
    protected override void OnParametersSet()
    {
        switch (Type?.ToLower())
        {
            case "length":
                availableUnits = new List<string> { "Meters", "Centimeters", "Millimeters", "Kilometers", "Miles", "Nautical Miles", "Yards", "Feet", "Inches", "Leagues" };
                break;
            case "weight":
                availableUnits = new List<string> { "Kilograms", "Grams", "Pounds", "Ounces" };
                break;
            case "volume":
                availableUnits = new List<string> { "Liters", "Milliliters", "Cubic Meters", "Cubic Centimeters" };
                break;
            // Add more cases for other measurements
            default:
                availableUnits = new List<string>();
                break;
        }
        fromUnit = availableUnits.FirstOrDefault(); // Assign a first unit from the list or default unit
        toUnit = availableUnits.FirstOrDefault(); // Assign a first unit from the list or default unit
    }

    private void ConvertUnits()
    {
        // Conversion logic based on the selected units and value
        // Gethering result if selected units conversion has developed dedicated coversion logic
        var conversion = ConversionManagerService.GetAllConversions()
            .FirstOrDefault(c => c.FromUnit.Equals(fromUnit, StringComparison.OrdinalIgnoreCase) &&
                                 c.ToUnit.Equals(toUnit, StringComparison.OrdinalIgnoreCase));
        if (conversion != null)
        {
            convertedValue = conversion.Convert(value);
        }
        else
        {
            // Handle conversion not found scenario
            convertedValue = double.NaN; // or any other appropriate error handling
        }
    }
}
