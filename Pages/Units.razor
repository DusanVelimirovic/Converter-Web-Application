@page "/units/{type}"
@page "/units"

@inject NavigationManager Navigation

<PageTitle>Unit Converter</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <NavMenu />
        </div>
        <div class="col-md-10">
            <h1>@(Type ?? "Select a Measurement Type") Page</h1>

            <div class="form-group">
                <label for="inputValue">Value to Convert</label>
                <input type="number" id="inputValue" @bind="value" class="form-control" />
            </div>

            <div class="form-group">
                <label>From Unit</label>
                <select @bind="fromUnit" class="form-control">
                    @foreach (var unit in availableUnits)
                    {
                        <option value="@unit">@unit</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>To Unit</label>
                <select @bind="toUnit" class="form-control">
                    @foreach (var unit in availableUnits)
                    {
                        <option value="@unit">@unit</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary" @onclick="ConvertUnits">Convert</button>

            <div class="form-group mt-3">
                <label for="resultValue">Result</label>
                <input type="text" id="resultValue" @bind="convertedValue" class="form-control" readonly />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Type { get; set; }

    private double value;
    private double convertedValue;
    private string fromUnit;
    private string toUnit;
    private List<string> availableUnits = new List<string>();

    protected override void OnParametersSet()
    {
        switch (Type?.ToLower())
        {
            case "length":
                availableUnits = new List<string> { "Meters", "Kilometers", "Miles", "Yards", "Feet", "Inches" };
                break;
            case "weight":
                availableUnits = new List<string> { "Kilograms", "Grams", "Pounds", "Ounces" };
                break;
            case "volume":
                availableUnits = new List<string> { "Liters", "Milliliters", "Cubic Meters", "Cubic Centimeters" };
                break;
            // Add more cases for other measurements
            default:
                availableUnits = new List<string>();
                break;
        }
        fromUnit = availableUnits.FirstOrDefault();
        toUnit = availableUnits.FirstOrDefault();
    }

    private void ConvertUnits()
    {
        // Conversion logic based on the selected units and value
        // This is a placeholder example; actual conversion logic will vary
        if (fromUnit == toUnit)
        {
            convertedValue = value;
        }
        else
        {
            // Add your conversion logic here
            convertedValue = value * 1.234; // Placeholder conversion factor
        }
    }
}
