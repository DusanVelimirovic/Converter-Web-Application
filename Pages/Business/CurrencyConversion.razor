@page "/currency-conversion"

@using Converter_Web_Application.Service.Base
@using Converter_Web_Application.Service.Models
@using Converter_Web_Application.Service.Localization

@inject ICurrencyConversionService CurrencyConversionService
@inject TranslationService TranslationService

<PageTitle>@TranslationService.Translate("Currency_Conversion")</PageTitle>

<h2>@TranslationService.Translate("Currency_Conversion")</h2>

<!-- Explanatory Text -->
<div class="alert alert-info">
    @TranslationService.Translate("Currency_Conversion_Info")
</div>

<div class="container">
    <!-- Form for input values -->
    <div class="form-group spaced-form-group">
        <label for="amount">@TranslationService.Translate("Amount")</label>
        <input type="number" id="amount" @bind="amount" class="form-control" />
    </div>
    <div class="form-group spaced-form-group">
        <label for="fromCurrency">@TranslationService.Translate("From_Currency")</label>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="fromCurrencyDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @selectedFromCurrency
            </button>
            <div class="dropdown-menu dropdown-scrollable" aria-labelledby="fromCurrencyDropdown">
                @foreach (var currency in enrichedCurrencies)
                {
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => SelectFromCurrency(currency)">
                        <img src="@currency.FlagUrl" alt="@currency.CurrencyCode" style="width:20px;height:15px;" /> @currency.CurrencyCode - @currency.CurrencyName
                    </a>
                }
            </div>
        </div>
    </div>
    <div class="form-group spaced-form-group">
        <label for="toCurrency">@TranslationService.Translate("To_Currency")</label>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="toCurrencyDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @selectedToCurrency
            </button>
            <div class="dropdown-menu dropdown-scrollable" aria-labelledby="toCurrencyDropdown">
                @foreach (var currency in enrichedCurrencies)
                {
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => SelectToCurrency(currency)">
                        <img src="@currency.FlagUrl" alt="@currency.CurrencyCode" style="width:20px;height:15px;" /> @currency.CurrencyCode - @currency.CurrencyName
                    </a>
                }
            </div>
        </div>
    </div>
    <button class="btn btn-primary spaced-form-group" @onclick="ConvertCurrency">@TranslationService.Translate("Convert")</button>

    <!-- Display result -->
    <div class="form-group mt-3">
        <label for="resultValue">@TranslationService.Translate("Converted_Amount")</label>
        <input type="text" id="resultValue" @bind="result" class="form-control" readonly />
    </div>
</div>

@code {
    private decimal amount;
    private string fromCurrency = "USD";
    private string toCurrency = "EUR";
    private string selectedFromCurrency = "USD";
    private string selectedToCurrency = "EUR";
    private string? result;
    private List<CurrencyInfo> enrichedCurrencies = new List<CurrencyInfo>();

    protected override async Task OnInitializedAsync()
    {
        enrichedCurrencies = await CurrencyConversionService.FetchEnrichedCurrencyDataAsync();
    }

    private void SelectFromCurrency(CurrencyInfo currency)
    {
        fromCurrency = currency.CurrencyCode;
        selectedFromCurrency = $"{currency.CurrencyCode} - {currency.CurrencyName}";
    }

    private void SelectToCurrency(CurrencyInfo currency)
    {
        toCurrency = currency.CurrencyCode;
        selectedToCurrency = $"{currency.CurrencyCode} - {currency.CurrencyName}";
    }

    private async Task ConvertCurrency()
    {
        try
        {
            var convertedAmount = await CurrencyConversionService.ConvertCurrencyAsync(amount, fromCurrency, toCurrency);
            result = $"{convertedAmount:F2} {toCurrency}";
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
        }
    }

    // Translation changes
    protected override void OnInitialized()
    {
        TranslationService.OnLanguageChanged += StateHasChanged;
    }

    public void Dispose()
    {
        TranslationService.OnLanguageChanged -= StateHasChanged;
    }
}
